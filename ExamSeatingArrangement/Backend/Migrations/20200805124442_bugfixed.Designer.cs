// <auto-generated />
using System;
using ExamSeatingArrangement2020.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExamSeatingArrangement2020.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200805124442_bugfixed")]
    partial class bugfixed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortForm")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.DepartmentExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("DepartmentId", "ExamId");

                    b.HasIndex("ExamId");

                    b.ToTable("DepartmentExams");
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Order")
                        .HasColumnType("text");

                    b.Property<string>("Session")
                        .HasColumnType("text");

                    b.Property<string>("SubjectCode")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<string>("SubjectName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("SubjectCode");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.FileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.PdfRectangleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Llx")
                        .HasColumnType("int");

                    b.Property<int>("Lly")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<int>("Urx")
                        .HasColumnType("int");

                    b.Property<int>("Ury")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PdfRectangleModels");
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RoomNumber")
                        .HasColumnType("text");

                    b.Property<string>("SeatNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.RoomExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("RoomId", "ExamId");

                    b.HasIndex("ExamId");

                    b.ToTable("RoomExams");
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.Seating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("RegisterNumber")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasAlternateKey("RegisterNumber");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Seatings");
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.SeatingExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("SeatingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("SeatingId", "ExamId");

                    b.HasIndex("ExamId");

                    b.ToTable("SeatingExams");
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.SeatingRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("SeatingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("SeatingId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("SeatingRooms");
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.SemesterModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<string>("SemesterMonths")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Date");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(4000)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(4000)");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.DepartmentExam", b =>
                {
                    b.HasOne("ExamSeatingArrangement2020.Models.Department", "Department")
                        .WithMany("DepartmentExams")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamSeatingArrangement2020.Models.Exam", "Exam")
                        .WithMany("ExamDepartments")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.RoomExam", b =>
                {
                    b.HasOne("ExamSeatingArrangement2020.Models.Exam", "Exam")
                        .WithMany("ExamRooms")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamSeatingArrangement2020.Models.Room", "Room")
                        .WithMany("RoomExams")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.Seating", b =>
                {
                    b.HasOne("ExamSeatingArrangement2020.Models.Department", "Department")
                        .WithMany("Seatings")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.SeatingExam", b =>
                {
                    b.HasOne("ExamSeatingArrangement2020.Models.Exam", "Exam")
                        .WithMany("ExamSeatings")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamSeatingArrangement2020.Models.Seating", "Seating")
                        .WithMany("SeatingExams")
                        .HasForeignKey("SeatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamSeatingArrangement2020.Models.SeatingRoom", b =>
                {
                    b.HasOne("ExamSeatingArrangement2020.Models.Room", "Room")
                        .WithMany("RoomSeatings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamSeatingArrangement2020.Models.Seating", "Seating")
                        .WithMany("SeatingRooms")
                        .HasForeignKey("SeatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
